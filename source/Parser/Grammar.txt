variable : NAME ;

/*
	implemented as 
	complexVariable : this? variableOrFunction ; with ensurance it doesn't end with function
*/
complexVariable 
	: this? variableOrFunction '.' variable
	| this? variableOrFunction WS* '[' WS* expression WS* ']' // variableOrFunction bracketUnwrap
	| this? variable ;

variableAssign 
	: complexVariable CRLFWS* 
	(':=' | '+=' | '-=' | '*=' | '/=' | '//=' | '.=' | '|=' | '&=' | '^=' | '>>=' | '<<=') 
	WS* expression ;



variableOrFunction
	: variable
	| functionCall
	| variableOrFunction '.' variableOrFunction
	| variableOrFunction WS* '[' WS* expression WS* ']' ; // variableOrFunction bracketUnwrap

bracketUnwrap : WS* '[' WS* expression WS* ']' ;



functionCall : NAME WS* functionParameter ;
functionParameter : '(' WS* (expression? | (expression (CRLFWS* ',' WS* expression)*)) ')' ;
// no need to check WS right before bracket as CRLFWS is executed in case 2 & +ve case 1 AND WS in -ve case 1
// functionParamter is abstracted so that it can be reused in complexFunctions

/*
	implemented as
	complexFunction : this? variableOrFunction (if doesn't end with function : WS* functionParameter)
 */
complexFunction
	: this? variableOrFunction '.' functionCall
	| this? variableOrFunction WS* '[' WS* expression WS* ']' WS* functionParameter 
	// variableOrFunction bracketUnwrap WS* functionParameter
	| this? functionCall ;





functionDeclaration : functionHead functionBody ;

functionHead : NAME '(' WS* functionDeclaraionParameterList WS* ')' ;
functionDeclaraionParameterList : noDefaultParameterList CRLFWS* ',' WS* defaultParameterList CRLFWS* ',' WS* variadicParameterList;
noDefaultParameterList : noDefaultParam (CRLFWS* ',' WS* noDefaultParam)* ; //also ensure they are no other param type
defaultParameterList : defaultParam (CRLFWS* ',' WS* defaultParam)  ;
variadicParameterList : variadicParam ;

noDefaultParam : variable ;
defaultParam : variable CRLFWS* '=' WS* expression ;
variadicParam :	variable CRLFWS* '*' ;

functionBody : '{' CRLFWS* functionBodyBlock CRLFWS* '}' ;
functionBodyBlock : ;


expression : STRING | NUMBER binaryOperation ;

binaryOperation : CRLFWS* mathematicalOperation ;

mathematicalOperation : ('+' | '-' | '*' | '/' | '//' | '**') WS* expression ;



this : 'this.' ; // abstacted away for code reuse 
WS : '\t' | ' ' ;
CRLF : '\r' | '\n' ;
CRLFWS : CRLF | WS ;
STRING : '"' (~('\n') | \.)* '"' ; //must end with a quotation, should not contain \n in between.
NUMBER : INT | HEX | DOUBLE ;
INT : [0-9]+ ;
HEX : '0' ('x' | 'X') [0-9a-fA-F]+ ;
DOUBLE : [0-9]* '.' [0-9]+ ;